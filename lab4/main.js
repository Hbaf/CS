const nkToNr = new Map([
	[4, 10],
	[6, 12],
	[8, 14],
])

const subBytesTable = [
	[ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ], 
	[ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ], 
	[ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ], 
	[ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ], 
	[ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ], 
	[ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ], 
	[ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ], 
	[ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ], 
	[ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ], 
	[ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ], 
	[ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ], 
	[ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ], 
	[ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ], 
	[ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ], 
	[ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ], 
	[ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ],
	];

const invSubBytesTable = [
	[ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb ],
	[ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb ],
	[ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e ],
	[ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 ],
	[ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 ],
	[ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 ],
	[ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 ],
	[ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b ],
	[ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 ],
	[ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e ],
	[ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ],
	[ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 ],
	[ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f ],
	[ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef ],
	[ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 ],
	[ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ],
	];

const mixColumnsTable = [
	[ 2, 3, 1, 1 ],
	[ 1, 2, 3, 1 ],
	[ 1, 1, 2, 3 ],
	[ 3, 1, 1, 2 ],
];

const rcon = [
	[ 0x00, 0x00, 0x00, 0x00 ],
	[ 0x01, 0x00, 0x00, 0x00 ],
	[ 0x02, 0x00, 0x00, 0x00 ],
	[ 0x04, 0x00, 0x00, 0x00 ],
	[ 0x08, 0x00, 0x00, 0x00 ],
	[ 0x10, 0x00, 0x00, 0x00 ],
	[ 0x20, 0x00, 0x00, 0x00 ],
	[ 0x40, 0x00, 0x00, 0x00 ],
	[ 0x80, 0x00, 0x00, 0x00 ],
	[ 0x1b, 0x00, 0x00, 0x00 ],
	[ 0x36, 0x00, 0x00, 0x00 ],
];

let rawKey = '+~\u0015\u0016(®Ò¦«÷\u0015\u0088	ÏO<';

const nb = 4;
const nk = rawKey.length / 4;
const nr = nkToNr.get(nk);

const key = keyExpansion(rawKey);
// console.log(key.map(item => item.map(item => item.toString(16))).join('\n'));

// Генерируем рассширенный набор ключей для раундов функции AddRoundKey()
function keyExpansion(rawKey) {
	let key = [];

	rawKeyArr = rawKey.split('');
	for (let i = 0; i < nk; i++) {
		key.push([
			rawKeyArr[i * 4].charCodeAt(0),
			rawKeyArr[i * 4 + 1].charCodeAt(0),
			rawKeyArr[i * 4 + 2].charCodeAt(0),
			rawKeyArr[i * 4 + 3].charCodeAt(0),
			]);
	}

	for (let i = nk; i < nb * (nr + 1); i++) {
		let temp = key[i - 1];
		if (i % nk) {
			if (nk > 6 && i % nk === 4) {
				temp = subWord(temp);
			}
		} else {
			temp = subWord(rotWord(temp)).map((item, ind) => item ^ rcon[i / nk][ind]);
		}
		key.push(key[i - nk].map((item, ind) => item ^ temp[ind]));
	}
	return key;
}

// Переводим текст в нужный формат (двойной массив[4*4] байт)
function textToByteBlocks(text) {
	let tempArr = text.split('');
	let tempText = '';
	let blocksArr = [];
	let ind = 0;
	tempArr.forEach((item) => {
		if (++ind % 16) {
			tempText += item;
		} else {
			tempText += item;
			blocksArr.push(tempText);
			tempText = '';
		}
	});
	if (tempText){
		blocksArr.push(tempText);
	}
	for (let i = 0; i < blocksArr.length; i++) {
		if (blocksArr[i].length < 16) {
			let dataAmount = i * 16 + blocksArr[i].length;
			let textDataAmount = '' + dataAmount;
			blocksArr[i] += '\0'.repeat(16 - blocksArr[i].length - textDataAmount.length) + textDataAmount;
		}
		tempArr = [
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		];
		let j, k;
		blocksArr[i].split('').forEach((item, ind) => {
			j = Math.floor(ind / 4);
			k = ind % 4;
			tempArr[k][j] = item.charCodeAt(0);
		});
		blocksArr[i] = tempArr;
	}
	return blocksArr;
}

// Извлекаем текст из нашего формата
function byteBloksToText(blocks){
	let tempCodeText = '';
	let tempText = '';
	blocks.forEach((block, index) => {
		for (let i = 0; i < nb; i++) {
			for (let j = 0; j < nb; j++) {
				tempCodeText += '0x' + block[j][i].toString(16) + ' ';
				tempText += String.fromCharCode(block[j][i]);
			}
		}
	});
	return [tempText, tempCodeText];
}

// Умножаем байт на x {01} в поле GF(2**8)
function Gmul(byteA, byteB) {
	p = 0;
	for (let i = 0; i < 8; i++) {
		if (byteB & 1) {
			p ^= byteA;
		}

		let highbit = byteA & 0x80;
		byteA = (byteA << 1) & 0xff;
		if (highbit) {
			byteA ^= 0x1b;
		}
		byteB >>= 1;
	}
	return p;
}

// Сдвигаем слово(массив из 4 байт) на 1 байт
function rotWord(word) {
	return [word[1], word[2], word[3], word[0]];
}

// Заменяем каждый байт слова в соответствии с таблицей subBytesTable
function subWord(word) {
	return word.map((byte) => {
		let str = byte.toString(16);
		let [i, j] = str.length > 1 ? str.split('') : 0 + str.split('');
		return subBytesTable[parseInt(i, 16)][parseInt(j, 16)];
	})
}

// Заменяем каждый байт блока в соответствии с таблицей subBytesTable
function subBytes(block) {
	return block.map( row => row.map( byte => {
		let str = byte.toString(16);
		let [i, j] = str.length > 1 ? str.split('') : 0 + str.split('');
		return subBytesTable[parseInt(i, 16)][parseInt(j, 16)];
	}));
}

// Сдвигаем каждую строку блока влево на количество байт равное ее индексу
function shiftRows(block) {
	for (let i = 1; i < 4; i++) {
		let rowLen = 4;
		let tempArr = [0, 0, 0, 0];
		for (let j = 0; j < rowLen; j ++) {
			tempArr[j] = block[i][(j + i) % rowLen];
		}
		block[i] = [...tempArr];
	}
	return block;
}

// Умножаем блок данных на специальный блок в поле GF(2**8) по модулю
function mixColumns(block) {
	let tempArr = [
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		];

	for (let i = 0; i < 4; i++) {
		tempArr[0][i] = Gmul(0x02, block[0][i]) ^ Gmul(0x03, block[1][i]) ^ block[2][i] ^ block[3][i];
		tempArr[1][i] = block[0][i] ^ Gmul(0x02, block[1][i]) ^ Gmul(0x03, block[2][i]) ^ block[3][i];
		tempArr[2][i] = block[0][i] ^ block[1][i] ^ Gmul(0x02, block[2][i]) ^ Gmul(0x03, block[3][i]);
		tempArr[3][i] = Gmul(0x03, block[0][i]) ^ block[1][i] ^ block[2][i] ^ Gmul(0x02, block[3][i]);
	}
	return tempArr;
}

// Заменяем каждый байт блока в соответствии с таблицей invSubBytesTable
function invSubBytes(block) {
	return block.map( row => row.map( byte => {
		let str = byte.toString(16);
		let [i, j] = str.length > 1 ? str.split('') : 0 + str.split('');
		return invSubBytesTable[parseInt(i, 16)][parseInt(j, 16)];
	}));
}

// Сдвигаем каждую строку блока вправо на количество байт равное ее индексу
function invShiftRows(block) {
	for (let i = 1; i < nb; i++) {
		let tempArr = [0, 0, 0, 0];
		for (let j = 0; j < nb; j ++) {
			tempArr[j] = block[i][(nb + (j - i)) % nb];
		}
		block[i] = [...tempArr];
	}
	return block;
}

// Умножаем блок данных на специальный блок в поле GF(2**8) по модулю
function invMixColumns(block) {
	let tempArr = [
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		[0,0,0,0],
		];

	for (let i = 0; i < 4; i++) {
		tempArr[0][i] = Gmul(0x0e, block[0][i]) ^ Gmul(0x0b, block[1][i]) ^ Gmul(0x0d, block[2][i]) ^ Gmul(0x09, block[3][i]);
		tempArr[1][i] = Gmul(0x09, block[0][i]) ^ Gmul(0x0e, block[1][i]) ^ Gmul(0x0b, block[2][i]) ^ Gmul(0x0d, block[3][i]);
		tempArr[2][i] = Gmul(0x0d, block[0][i]) ^ Gmul(0x09, block[1][i]) ^ Gmul(0x0e, block[2][i]) ^ Gmul(0x0b, block[3][i]);
		tempArr[3][i] = Gmul(0x0b, block[0][i]) ^ Gmul(0x0d, block[1][i]) ^ Gmul(0x09, block[2][i]) ^ Gmul(0x0e, block[3][i]);
	}
	return tempArr;
}

// XOR-им каждый байт блока с ключем текущего раунда
function addRoundKey(block, round) {
	return block.map((word, index) => {
		return word.map((byte, ind) => {
			return byte ^ key[round * nb + ind][index];
		})
	})
}

// Шифруем
function cipher(block) {
	block = addRoundKey(block, 0)
	for (let i = 1; i < nr; i++) {
		block =  addRoundKey(mixColumns(shiftRows(subBytes(block))), i);
	}
	return addRoundKey(shiftRows(subBytes(block)), nr);
}

// Дешифруем
function invCipher(block) {
	block = addRoundKey(block, nr);
	for (let i = nr - 1; i > 0; i--) {
		block = invMixColumns(addRoundKey(invSubBytes(invShiftRows(block)), i))
	}
	return addRoundKey(invSubBytes(invShiftRows(block)) ,0);
}

// const text = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
const text = '2Cö¨\u0088Z0\u008d11\u0098¢à7\u00074';
const cipherText = textToByteBlocks(text).map(block => cipher(block));
const invCipherText = cipherText.map(block => invCipher(block));

console.log('Before:\n' + '='.repeat(nk * 8));
console.log(text);
console.log('Same in 0xXX:');
console.log(text.split('').map(item => item.charCodeAt(0).toString(16)).map(item => '0x' + item).join(' '));
console.log('='.repeat(nk * 8) + '\n');
console.log('After:\n' + '='.repeat(nk * 8));
console.log(byteBloksToText(cipherText)[0]);
console.log('Same in 0xXX:');
console.log(byteBloksToText(cipherText)[1]);
console.log('='.repeat(nk * 8) + '\n');
console.log('And back:\n' + '='.repeat(nk * 8));
console.log(byteBloksToText(invCipherText)[0]);
console.log('Same in 0xXX:');x``
console.log(byteBloksToText(invCipherText)[1]);
console.log('='.repeat(nk * 8));
